{"version":3,"sources":["../node_modules/hdkey/lib/hdkey.js","../node_modules/bnc-onboard/dist/esm/hd-wallet-51018814.js"],"names":["assert","require","Buffer","crypto","bs58check","secp256k1","MASTER_SECRET","from","HARDENED_OFFSET","BITCOIN_VERSIONS","private","public","HDKey","versions","this","depth","index","_privateKey","_publicKey","chainCode","_fingerprint","parentFingerprint","serialize","hdkey","version","key","buffer","allocUnsafe","writeUInt32BE","writeUInt8","fingerprint","copy","hash160","buf","sha","createHash","update","digest","Object","defineProperty","prototype","get","_identifier","identifier","set","value","equal","length","privateKeyVerify","publicKeyCreate","publicKey","slice","readUInt32BE","publicKeyVerify","publicKeyConvert","encode","concat","alloc","privateKey","derive","path","entries","split","forEach","c","i","hardened","childIndex","parseInt","deriveChild","test","data","isHardened","indexBuffer","pk","zb","I","createHmac","IL","IR","hd","privateKeyTweakAdd","err","publicKeyTweakAdd","sign","hash","ecdsaSign","signature","verify","ecdsaVerify","Uint8Array","wipePrivateData","randomBytes","toJSON","xpriv","privateExtendedKey","xpub","publicExtendedKey","fromMasterSeed","seedBuffer","fromExtendedKey","base58key","keyBuffer","decode","readUInt8","fromJSON","obj","module","exports","publicToAddress","ethUtil","toChecksumAddress","generateAddresses","account","offset","hdk","addresses","dkey","address","toString","push","dPath","isValidPath","parts","includes","undefined","accountFieldNumber","Number","isNaN","changeFieldNumber","addressFieldNumber"],"mappings":"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","file":"static/js/41.cf0d3c5d.chunk.js","sourcesContent":["var assert = require('assert')\nvar Buffer = require('safe-buffer').Buffer\nvar crypto = require('crypto')\nvar bs58check = require('bs58check')\nvar secp256k1 = require('secp256k1')\n\nvar MASTER_SECRET = Buffer.from('Bitcoin seed', 'utf8')\nvar HARDENED_OFFSET = 0x80000000\nvar LEN = 78\n\n// Bitcoin hardcoded by default, can use package `coininfo` for others\nvar BITCOIN_VERSIONS = {private: 0x0488ADE4, public: 0x0488B21E}\n\nfunction HDKey (versions) {\n  this.versions = versions || BITCOIN_VERSIONS\n  this.depth = 0\n  this.index = 0\n  this._privateKey = null\n  this._publicKey = null\n  this.chainCode = null\n  this._fingerprint = 0\n  this.parentFingerprint = 0\n}\n\nObject.defineProperty(HDKey.prototype, 'fingerprint', { get: function () { return this._fingerprint } })\nObject.defineProperty(HDKey.prototype, 'identifier', { get: function () { return this._identifier } })\nObject.defineProperty(HDKey.prototype, 'pubKeyHash', { get: function () { return this.identifier } })\n\nObject.defineProperty(HDKey.prototype, 'privateKey', {\n  get: function () {\n    return this._privateKey\n  },\n  set: function (value) {\n    assert.equal(value.length, 32, 'Private key must be 32 bytes.')\n    assert(secp256k1.privateKeyVerify(value) === true, 'Invalid private key')\n\n    this._privateKey = value\n    this._publicKey = Buffer.from(secp256k1.publicKeyCreate(value, true))\n    this._identifier = hash160(this.publicKey)\n    this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0)\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'publicKey', {\n  get: function () {\n    return this._publicKey\n  },\n  set: function (value) {\n    assert(value.length === 33 || value.length === 65, 'Public key must be 33 or 65 bytes.')\n    assert(secp256k1.publicKeyVerify(value) === true, 'Invalid public key')\n\n    this._publicKey = Buffer.from(secp256k1.publicKeyConvert(value, true)) // force compressed point\n    this._identifier = hash160(this.publicKey)\n    this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0)\n    this._privateKey = null\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'privateExtendedKey', {\n  get: function () {\n    if (this._privateKey) return bs58check.encode(serialize(this, this.versions.private, Buffer.concat([Buffer.alloc(1, 0), this.privateKey])))\n    else return null\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'publicExtendedKey', {\n  get: function () {\n    return bs58check.encode(serialize(this, this.versions.public, this.publicKey))\n  }\n})\n\nHDKey.prototype.derive = function (path) {\n  if (path === 'm' || path === 'M' || path === \"m'\" || path === \"M'\") {\n    return this\n  }\n\n  var entries = path.split('/')\n  var hdkey = this\n  entries.forEach(function (c, i) {\n    if (i === 0) {\n      assert(/^[mM]{1}/.test(c), 'Path must start with \"m\" or \"M\"')\n      return\n    }\n\n    var hardened = (c.length > 1) && (c[c.length - 1] === \"'\")\n    var childIndex = parseInt(c, 10) // & (HARDENED_OFFSET - 1)\n    assert(childIndex < HARDENED_OFFSET, 'Invalid index')\n    if (hardened) childIndex += HARDENED_OFFSET\n\n    hdkey = hdkey.deriveChild(childIndex)\n  })\n\n  return hdkey\n}\n\nHDKey.prototype.deriveChild = function (index) {\n  var isHardened = index >= HARDENED_OFFSET\n  var indexBuffer = Buffer.allocUnsafe(4)\n  indexBuffer.writeUInt32BE(index, 0)\n\n  var data\n\n  if (isHardened) { // Hardened child\n    assert(this.privateKey, 'Could not derive hardened child key')\n\n    var pk = this.privateKey\n    var zb = Buffer.alloc(1, 0)\n    pk = Buffer.concat([zb, pk])\n\n    // data = 0x00 || ser256(kpar) || ser32(index)\n    data = Buffer.concat([pk, indexBuffer])\n  } else { // Normal child\n    // data = serP(point(kpar)) || ser32(index)\n    //      = serP(Kpar) || ser32(index)\n    data = Buffer.concat([this.publicKey, indexBuffer])\n  }\n\n  var I = crypto.createHmac('sha512', this.chainCode).update(data).digest()\n  var IL = I.slice(0, 32)\n  var IR = I.slice(32)\n\n  var hd = new HDKey(this.versions)\n\n  // Private parent key -> private child key\n  if (this.privateKey) {\n    // ki = parse256(IL) + kpar (mod n)\n    try {\n      hd.privateKey = Buffer.from(secp256k1.privateKeyTweakAdd(Buffer.from(this.privateKey), IL))\n      // throw if IL >= n || (privateKey + IL) === 0\n    } catch (err) {\n      // In case parse256(IL) >= n or ki == 0, one should proceed with the next value for i\n      return this.deriveChild(index + 1)\n    }\n  // Public parent key -> public child key\n  } else {\n    // Ki = point(parse256(IL)) + Kpar\n    //    = G*IL + Kpar\n    try {\n      hd.publicKey = Buffer.from(secp256k1.publicKeyTweakAdd(Buffer.from(this.publicKey), IL, true))\n      // throw if IL >= n || (g**IL + publicKey) is infinity\n    } catch (err) {\n      // In case parse256(IL) >= n or Ki is the point at infinity, one should proceed with the next value for i\n      return this.deriveChild(index + 1)\n    }\n  }\n\n  hd.chainCode = IR\n  hd.depth = this.depth + 1\n  hd.parentFingerprint = this.fingerprint// .readUInt32BE(0)\n  hd.index = index\n\n  return hd\n}\n\nHDKey.prototype.sign = function (hash) {\n  return Buffer.from(secp256k1.ecdsaSign(hash, this.privateKey).signature)\n}\n\nHDKey.prototype.verify = function (hash, signature) {\n  return secp256k1.ecdsaVerify(\n    Uint8Array.from(signature),\n    Uint8Array.from(hash),\n    Uint8Array.from(this.publicKey)\n  )\n}\n\nHDKey.prototype.wipePrivateData = function () {\n  if (this._privateKey) crypto.randomBytes(this._privateKey.length).copy(this._privateKey)\n  this._privateKey = null\n  return this\n}\n\nHDKey.prototype.toJSON = function () {\n  return {\n    xpriv: this.privateExtendedKey,\n    xpub: this.publicExtendedKey\n  }\n}\n\nHDKey.fromMasterSeed = function (seedBuffer, versions) {\n  var I = crypto.createHmac('sha512', MASTER_SECRET).update(seedBuffer).digest()\n  var IL = I.slice(0, 32)\n  var IR = I.slice(32)\n\n  var hdkey = new HDKey(versions)\n  hdkey.chainCode = IR\n  hdkey.privateKey = IL\n\n  return hdkey\n}\n\nHDKey.fromExtendedKey = function (base58key, versions) {\n  // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n  versions = versions || BITCOIN_VERSIONS\n  var hdkey = new HDKey(versions)\n\n  var keyBuffer = bs58check.decode(base58key)\n\n  var version = keyBuffer.readUInt32BE(0)\n  assert(version === versions.private || version === versions.public, 'Version mismatch: does not match private or public')\n\n  hdkey.depth = keyBuffer.readUInt8(4)\n  hdkey.parentFingerprint = keyBuffer.readUInt32BE(5)\n  hdkey.index = keyBuffer.readUInt32BE(9)\n  hdkey.chainCode = keyBuffer.slice(13, 45)\n\n  var key = keyBuffer.slice(45)\n  if (key.readUInt8(0) === 0) { // private\n    assert(version === versions.private, 'Version mismatch: version does not match private')\n    hdkey.privateKey = key.slice(1) // cut off first 0x0 byte\n  } else {\n    assert(version === versions.public, 'Version mismatch: version does not match public')\n    hdkey.publicKey = key\n  }\n\n  return hdkey\n}\n\nHDKey.fromJSON = function (obj) {\n  return HDKey.fromExtendedKey(obj.xpriv)\n}\n\nfunction serialize (hdkey, version, key) {\n  // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n  var buffer = Buffer.allocUnsafe(LEN)\n\n  buffer.writeUInt32BE(version, 0)\n  buffer.writeUInt8(hdkey.depth, 4)\n\n  var fingerprint = hdkey.depth ? hdkey.parentFingerprint : 0x00000000\n  buffer.writeUInt32BE(fingerprint, 5)\n  buffer.writeUInt32BE(hdkey.index, 9)\n\n  hdkey.chainCode.copy(buffer, 13)\n  key.copy(buffer, 45)\n\n  return buffer\n}\n\nfunction hash160 (buf) {\n  var sha = crypto.createHash('sha256').update(buf).digest()\n  return crypto.createHash('ripemd160').update(sha).digest()\n}\n\nHDKey.HARDENED_OFFSET = HARDENED_OFFSET\nmodule.exports = HDKey\n","import * as ethUtil from 'ethereumjs-util';\nimport HDKey from 'hdkey';\nimport { Buffer } from 'buffer';\nvar publicToAddress = ethUtil.publicToAddress,\n    toChecksumAddress = ethUtil.toChecksumAddress;\nvar numberToGet = 5;\n\nfunction generateAddresses(account, offset) {\n  var publicKey = account.publicKey,\n      chainCode = account.chainCode,\n      path = account.path;\n  var hdk = new HDKey();\n  hdk.publicKey = new Buffer(publicKey, 'hex');\n  hdk.chainCode = new Buffer(chainCode, 'hex');\n  var addresses = [];\n\n  for (var i = offset; i < numberToGet + offset; i++) {\n    var dkey = hdk.deriveChild(i);\n    var address = publicToAddress(dkey.publicKey, true).toString('hex');\n    addresses.push({\n      dPath: \"\".concat(path, \"/\").concat(i),\n      address: toChecksumAddress(\"0x\".concat(address))\n    });\n  }\n\n  return addresses;\n}\n\nfunction isValidPath(path) {\n  var parts = path.split('/');\n\n  if (parts[0] !== 'm') {\n    return false;\n  }\n\n  if (parts[1] !== \"44'\") {\n    return false;\n  }\n\n  if (![\"60'\", \"1'\", \"73799'\", \"246'\"].includes(parts[2])) {\n    return false;\n  }\n\n  if (parts[3] === undefined || parts[3] === \"0'\") {\n    return true;\n  }\n\n  var accountFieldNumber = Number(parts[3].slice(0, -1));\n\n  if (isNaN(accountFieldNumber) || accountFieldNumber < 0 || parts[3].slice(-1) !== \"'\") {\n    return false;\n  }\n\n  if (parts[4] === undefined) {\n    return true;\n  }\n\n  var changeFieldNumber = Number(parts[4]);\n\n  if (isNaN(changeFieldNumber) || changeFieldNumber < 0) {\n    return false;\n  }\n\n  if (parts[5] === undefined) {\n    return true;\n  }\n\n  var addressFieldNumber = Number(parts[5]);\n\n  if (isNaN(addressFieldNumber) || addressFieldNumber < 0) {\n    return false;\n  }\n\n  return true;\n}\n\nexport { generateAddresses, isValidPath };"],"sourceRoot":""}